import { useState, useEffect, createContext, useContext } from 'react';
import { User, Company, AuthState } from '@/types';
import AsyncStorage from '@react-native-async-storage/async-storage';
import EmailService from '@/services/emailService';

// Mock data for development
const mockUsers: User[] = [
  {
    id: '1',
    firstName: 'John',
    lastName: 'Smith',
    email: 'john@example.com',
    phone: '27123456789',
    businessName: 'John Smith Business',
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

let mockCompanies: Company[] = [];

interface AuthContextType {
  authState: AuthState;
  login: (email: string, password: string) => Promise<boolean>;
  register: (userData: Partial<User>) => Promise<boolean>;
  logout: () => void;
  updateUser: (userData: Partial<User>) => Promise<boolean>;
  updateCompany: (companyData: Partial<Company>) => Promise<boolean>;
  createCompany: (companyData: Partial<Company>) => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType>({
  authState: {
    user: null,
    company: null,
    isLoading: false,
    isAuthenticated: false,
  },
  login: async () => false,
  register: async () => false,
  logout: () => {},
  updateUser: async () => false,
  updateCompany: async () => false,
  createCompany: async () => false,
});

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    company: null,
    isLoading: true,
    isAuthenticated: false,
  });

  // Check for stored auth on app start
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const storedUser = await AsyncStorage.getItem('user');
        const storedCompany = await AsyncStorage.getItem('company');

        if (storedUser) {
          const user = JSON.parse(storedUser);
          let company = null;

          if (storedCompany) {
            company = JSON.parse(storedCompany);
          }

          setAuthState({
            user,
            company,
            isLoading: false,
            isAuthenticated: true,
          });
        } else {
          setAuthState(prev => ({ ...prev, isLoading: false }));
        }
      } catch (error) {
        console.error('Error checking auth:', error);
        setAuthState(prev => ({ ...prev, isLoading: false }));
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      const user = mockUsers.find(u => u.email === email);
      if (user && password === 'password') {
        await AsyncStorage.setItem('user', JSON.stringify(user));

        const existingCompany = mockCompanies.find(c => c.userId === user.id);
        if (existingCompany) {
          await AsyncStorage.setItem('company', JSON.stringify(existingCompany));
        }

        setAuthState({
          user,
          company: existingCompany || null,
          isLoading: false,
          isAuthenticated: true,
        });
        return true;
      }
      return false;
    } catch (error) {
      console.error('Login error:', error);
      return false;
    }
  };

  const register = async (userData: Partial<User>): Promise<boolean> => {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      const newUser: User = {
        id: Date.now().toString(),
        firstName: userData.firstName || '',
        lastName: userData.lastName || '',
        email: userData.email || '',
        phone: userData.phone || ''
        businessName: userData.businessName || 'New Business',
        createdAt: new Date(),
        updatedAt: new Date(),
        businessName: userData.businessName || 'New Business',
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      mockUsers.push(newUser);
      await AsyncStorage.setItem('user', JSON.stringify(newUser));

      setAuthState({
        user: newUser,
        company: null,
        isLoading: false,
        isAuthenticated: true,
      });
      return true;
    } catch (error) {
      console.error('Registration error:', error);
      return false;
    }
  };

  const logout = async () => {
    try {
      await AsyncStorage.removeItem('user');
      await AsyncStorage.removeItem('company');
      setAuthState({
        user: null,
        company: null,
        isLoading: false,
        isAuthenticated: false,
      });
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  const updateUser = async (userData: Partial<User>): Promise<boolean> => {
    if (!authState.user) return false;

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));

      const updatedUser = { ...authState.user, ...userData };
      await AsyncStorage.setItem('user', JSON.stringify(updatedUser));

      setAuthState(prev => ({ ...prev, user: updatedUser }));
      return true;
    } catch (error) {
      console.error('Update user error:', error);
      return false;
    }
  };

  const updateCompany = async (companyData: Partial<Company>): Promise<boolean> => {
    if (!authState.company) return false;

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));

      const updatedCompany = { ...authState.company, ...companyData, updatedAt: new Date() };
      await AsyncStorage.setItem('company', JSON.stringify(updatedCompany));

      setAuthState(prev => ({ ...prev, company: updatedCompany }));
      return true;
    } catch (error) {
      console.error('Update company error:', error);
      return false;
    }
  };

  const createCompany = async (companyData: Partial<Company>): Promise<boolean> => {
    if (!authState.user) return false;

    try {
      // Create company object for local storage
      const newCompany: Company = {
        id: Date.now().toString(),
        userId: authState.user.id,
        businessName: companyData.businessName || '',
        ownerName: companyData.ownerName || '',
        email: companyData.email || '',
        phone: companyData.phone || '',
        whatsappNumber: companyData.whatsappNumber,
        location: companyData.location || '',
        city: companyData.city || '',
        country: companyData.country || '',
        category: companyData.category || 'Other',
        website: companyData.website,
        description: companyData.description || '',
        profileImage: companyData.profileImage,
        faithAffirmation: companyData.faithAffirmation || false,
        churchName: companyData.churchName || '',
        christianDuration: companyData.christianDuration || '<1 year',
        churchInvolvement: companyData.churchInvolvement,
        status: 'pending',
        adminNotes: companyData.adminNotes,
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      // Send email to admin
      const emailService = EmailService.getInstance();
      const emailSent = await emailService.sendApprovalRequest({
        businessName: newCompany.businessName,
        ownerName: newCompany.ownerName,
        email: newCompany.email,
        phone: newCompany.phone,
        whatsappNumber: newCompany.whatsappNumber,
        city: newCompany.city,
        category: newCompany.category,
        website: newCompany.website,
        description: newCompany.description,
        churchName: newCompany.churchName,
        christianDuration: newCompany.christianDuration,
        churchInvolvement: newCompany.churchInvolvement,
        profileImage: newCompany.profileImage,
        location: newCompany.location,
        country: newCompany.country,
      });

      if (emailSent) {
        // Store locally for development
        mockCompanies.push(newCompany);
        await AsyncStorage.setItem('company', JSON.stringify(newCompany));
        setAuthState(prev => ({ ...prev, company: newCompany }));
        return true;
      } else {
        console.error('Failed to send approval email');
        return false;
      }
    } catch (error) {
      console.error('Create company error:', error);
      return false;
    }
  };

  return (
    <AuthContext.Provider value={{
      authState,
      login,
      register,
      logout,
      updateUser,
      updateCompany,
      createCompany,
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useCompanies = () => {
  const [companies, setCompanies] = useState<Company[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const getCompanies = async (filters?: { keyword?: string; category?: string; location?: string }) => {
    setIsLoading(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    
    let filteredCompanies = mockCompanies.filter(c => c.status === 'approved');
    
    if (filters?.keyword) {
      const keyword = filters.keyword.toLowerCase();
      filteredCompanies = filteredCompanies.filter(c =>
        c.businessName.toLowerCase().includes(keyword) ||
        c.description.toLowerCase().includes(keyword) ||
        c.ownerName.toLowerCase().includes(keyword)
      );
    }
    
    if (filters?.category && filters.category !== 'All') {
      filteredCompanies = filteredCompanies.filter(c => c.category === filters.category);
    }
    
    if (filters?.location) {
      filteredCompanies = filteredCompanies.filter(c =>
        c.city.toLowerCase().includes(filters.location!.toLowerCase()) ||
        c.location.toLowerCase().includes(filters.location!.toLowerCase())
      );
    }
    
    setCompanies(filteredCompanies);
    setIsLoading(false);
  };

  return {
    companies,
    isLoading,
    getCompanies,
  };
};
