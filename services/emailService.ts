import emailjs from '@emailjs/browser';

export interface CompanySubmissionData {
  businessName: string;
  ownerName: string;
  email: string;
  phone: string;
  whatsappNumber?: string;
  city: string;
  category: string;
  website?: string;
  description: string;
  churchName: string;
  christianDuration: string;
  churchInvolvement?: string;
  profileImage?: string;
  location: string;
  country: string;
}

class EmailService {
  private static instance: EmailService;
  private readonly SERVICE_ID: string;
  private readonly TEMPLATE_ID: string;
  private readonly PUBLIC_KEY: string;
  private readonly ADMIN_EMAIL: string;

  constructor() {
    // Get configuration from environment or use defaults
    this.SERVICE_ID = process.env.EXPO_PUBLIC_EMAILJS_SERVICE_ID || 'service_holymarket';
    this.TEMPLATE_ID = process.env.EXPO_PUBLIC_EMAILJS_TEMPLATE_ID || 'template_company_approval';
    this.PUBLIC_KEY = process.env.EXPO_PUBLIC_EMAILJS_PUBLIC_KEY || 'YOUR_EMAILJS_PUBLIC_KEY';
    this.ADMIN_EMAIL = process.env.EXPO_PUBLIC_ADMIN_EMAIL || 'evolutionmediasa@gmail.com';
  }

  static getInstance(): EmailService {
    if (!EmailService.instance) {
      EmailService.instance = new EmailService();
    }
    return EmailService.instance;
  }

  async sendCompanyApprovalRequest(data: CompanySubmissionData): Promise<boolean> {
    try {
      console.log('üöÄ Sending company approval request email...');

      // Initialize EmailJS
      emailjs.init(this.PUBLIC_KEY);

      const templateParams = {
        to_email: this.ADMIN_EMAIL,
        from_name: data.ownerName,
        from_email: data.email,
        business_name: data.businessName,
        owner_name: data.ownerName,
        phone: data.phone,
        whatsapp_number: data.whatsappNumber || 'Not provided',
        city: data.city,
        category: data.category,
        website: data.website || 'Not provided',
        description: data.description,
        church_name: data.churchName,
        christian_duration: data.christianDuration,
        church_involvement: data.churchInvolvement || 'Not provided',
        location: data.location,
        country: data.country,
        submission_date: new Date().toLocaleString(),
      };

      console.log('üìß Email parameters:', templateParams);

      const response = await emailjs.send(
        this.SERVICE_ID,
        this.TEMPLATE_ID,
        templateParams
      );

      if (response.status === 200) {
        console.log('‚úÖ Email sent successfully:', response.text);
        return true;
      } else {
        console.error('‚ùå Failed to send email:', response.text);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error sending email:', error);
      return false;
    }
  }

  // Enhanced fallback method with more options
  async sendCompanyApprovalRequestFallback(data: CompanySubmissionData): Promise<boolean> {
    try {
      console.log('üîÑ Using fallback email method...');

      const subject = `HOLY-MARKET Company Approval Request - ${data.businessName}`;
      const body = `
HOLY-MARKET Company Approval Request

Business Information:
- Business Name: ${data.businessName}
- Owner Name: ${data.ownerName}
- Email: ${data.email}
- Phone: ${data.phone}
- WhatsApp: ${data.whatsappNumber || 'Not provided'}
- City: ${data.city}
- Category: ${data.category}
- Website: ${data.website || 'Not provided'}
- Location: ${data.location}
- Country: ${data.country}

Business Description:
${data.description}

Faith Information:
- Church Name: ${data.churchName}
- Christian Duration: ${data.christianDuration}
- Church Involvement: ${data.churchInvolvement || 'Not provided'}

Submission Date: ${new Date().toLocaleString()}

Please review this application and respond to the applicant at: ${data.email}

---
This email was generated by the HOLY-MARKET app submission system.
If you are not the intended recipient, please ignore this message.
      `.trim();

      // For React Native, we'll use a more sophisticated fallback
      console.log('=== EMAIL CONTENT FOR PROCESSING ===');
      console.log('To:', this.ADMIN_EMAIL);
      console.log('Subject:', subject);
      console.log('Body:');
      console.log(body);
      console.log('=== END EMAIL CONTENT ===');

      // Option 1: Try to use a simple fetch to a webhook or API
      try {
        const webhookResponse = await fetch('https://webhook.site/YOUR_WEBHOOK_URL', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            to: this.ADMIN_EMAIL,
            subject: subject,
            body: body,
            timestamp: new Date().toISOString(),
          }),
        });

        if (webhookResponse.ok) {
          console.log('‚úÖ Email data sent to webhook successfully');
          return true;
        }
      } catch (webhookError) {
        console.log('‚ö†Ô∏è Webhook failed, continuing with fallback');
      }

      // Option 2: Store in AsyncStorage for manual processing
      const submissionData = {
        id: Date.now().toString(),
        data: data,
        emailContent: { to: this.ADMIN_EMAIL, subject, body },
        timestamp: new Date().toISOString(),
        status: 'pending',
      };

      // In a real app, you might want to sync this with a backend
      console.log('üíæ Storing submission data locally for processing');
      console.log(JSON.stringify(submissionData, null, 2));

      return true; // Return true to indicate the submission was recorded
    } catch (error) {
      console.error('‚ùå Error in fallback method:', error);
      return false;
    }
  }

  // Main method that tries EmailJS first, then falls back
  async sendApprovalRequest(data: CompanySubmissionData): Promise<boolean> {
    console.log('üì§ Starting approval request process...');
    console.log('Business:', data.businessName);
    console.log('Owner:', data.ownerName);
    console.log('Email:', data.email);

    // Try EmailJS first
    const emailJsResult = await this.sendCompanyApprovalRequest(data);
    if (emailJsResult) {
      console.log('üéâ Email sent successfully via EmailJS');
      return true;
    }

    // Fallback to alternative method
    console.log('üîÑ EmailJS failed, using fallback method');
    const fallbackResult = await this.sendCompanyApprovalRequestFallback(data);

    if (fallbackResult) {
      console.log('‚úÖ Fallback method completed successfully');
      console.log('üìã Please check the console output above for the email content');
      console.log('üìß You can manually forward this information to:', this.ADMIN_EMAIL);
    } else {
      console.error('‚ùå Both EmailJS and fallback method failed');
    }

    return fallbackResult;
  }
}

export default EmailService;
